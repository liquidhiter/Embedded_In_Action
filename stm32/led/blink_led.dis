
========================================================================

** ELF Header Information

    File Name: Objects\blink_led.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: Not specified
    Flags: EF_ARM_ABI_FLOAT_SOFT (0x05000200)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: Arm Compiler for Embedded 6.21 Tool: armasm [5ec1f200]
    Component: Arm Compiler for Embedded 6.21 Tool: armlink [5ec1fa00]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 13

    Program header offset: 2580 (0x00000a14)
    Section header offset: 2612 (0x00000a34)

    Section header string table index: 12

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_R]
    Size : 144 bytes
    Virtual address: 0x08000000 (Alignment 4)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 144 bytes (alignment 4)
    Address: 0x08000000

    $d.realdata
    RESET
    __Vectors
        0x08000000:    00000000    ....    DCD    0
        0x08000004:    08000009    ....    DCD    134217737
    $t
    .text
    Reset_Handler
        0x08000008:    f8dfd004    ....    LDR      sp,[pc,#4] ; [0x8000010] = 0x20001000
        0x0800000c:    f000f80e    ....    BL       mymain ; 0x800002c
    $d
        0x08000010:    20001000    ...     DCD    536875008
    $t.0
    delay
        0x08000014:    b081        ..      SUB      sp,sp,#4
        0x08000016:    9000        ..      STR      r0,[sp,#0]
        0x08000018:    e7ff        ..      B        0x800001a ; delay + 6
        0x0800001a:    9800        ..      LDR      r0,[sp,#0]
        0x0800001c:    1e41        A.      SUBS     r1,r0,#1
        0x0800001e:    9100        ..      STR      r1,[sp,#0]
        0x08000020:    b108        ..      CBZ      r0,0x8000026 ; delay + 18
        0x08000022:    e7ff        ..      B        0x8000024 ; delay + 16
        0x08000024:    e7f9        ..      B        0x800001a ; delay + 6
        0x08000026:    b001        ..      ADD      sp,sp,#4
        0x08000028:    4770        pG      BX       lr
        0x0800002a:    0000        ..      MOVS     r0,r0
    mymain
        0x0800002c:    b580        ..      PUSH     {r7,lr}
        0x0800002e:    b084        ..      SUB      sp,sp,#0x10
        0x08000030:    f2410018    A...    MOV      r0,#0x1018
        0x08000034:    f2c40002    ....    MOVT     r0,#0x4002
        0x08000038:    9003        ..      STR      r0,[sp,#0xc]
        0x0800003a:    f2410004    A...    MOV      r0,#0x1004
        0x0800003e:    f2c40001    ....    MOVT     r0,#0x4001
        0x08000042:    9002        ..      STR      r0,[sp,#8]
        0x08000044:    f241000c    A...    MOV      r0,#0x100c
        0x08000048:    f2c40001    ....    MOVT     r0,#0x4001
        0x0800004c:    9001        ..      STR      r0,[sp,#4]
        0x0800004e:    9903        ..      LDR      r1,[sp,#0xc]
        0x08000050:    6808        .h      LDR      r0,[r1,#0]
        0x08000052:    f0400010    @...    ORR      r0,r0,#0x10
        0x08000056:    6008        .`      STR      r0,[r1,#0]
        0x08000058:    9902        ..      LDR      r1,[sp,#8]
        0x0800005a:    6808        .h      LDR      r0,[r1,#0]
        0x0800005c:    f4401080    @...    ORR      r0,r0,#0x100000
        0x08000060:    6008        .`      STR      r0,[r1,#0]
        0x08000062:    e7ff        ..      B        0x8000064 ; mymain + 56
        0x08000064:    9901        ..      LDR      r1,[sp,#4]
        0x08000066:    6808        .h      LDR      r0,[r1,#0]
        0x08000068:    f4405000    @..P    ORR      r0,r0,#0x2000
        0x0800006c:    6008        .`      STR      r0,[r1,#0]
        0x0800006e:    f24860a0    H..`    MOV      r0,#0x86a0
        0x08000072:    f2c00001    ....    MOVT     r0,#1
        0x08000076:    9000        ..      STR      r0,[sp,#0]
        0x08000078:    f7ffffcc    ....    BL       delay ; 0x8000014
        0x0800007c:    9800        ..      LDR      r0,[sp,#0]
        0x0800007e:    9a01        ..      LDR      r2,[sp,#4]
        0x08000080:    6811        .h      LDR      r1,[r2,#0]
        0x08000082:    f4215100    !..Q    BIC      r1,r1,#0x2000
        0x08000086:    6011        .`      STR      r1,[r2,#0]
        0x08000088:    f7ffffc4    ....    BL       delay ; 0x8000014
        0x0800008c:    e7ea        ..      B        0x8000064 ; mymain + 56
        0x0800008e:    0000        ..      MOVS     r0,r0

** Section #2 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 151 bytes


** Section #3 '.debug_frame' (SHT_PROGBITS)
    Size   : 136 bytes


** Section #4 '.debug_info' (SHT_PROGBITS)
    Size   : 336 bytes


** Section #5 '.debug_line' (SHT_PROGBITS)
    Size   : 192 bytes


** Section #6 '.debug_ranges' (SHT_PROGBITS)
    Size   : 24 bytes


** Section #7 '.debug_str' (SHT_PROGBITS)
    Size   : 186 bytes


** Section #8 '.symtab' (SHT_SYMTAB)
    Size   : 224 bytes (alignment 4)
    String table #9 '.strtab'
    Last local symbol no. 8


** Section #9 '.strtab' (SHT_STRTAB)
    Size   : 244 bytes


** Section #10 '.note' (SHT_NOTE)
    Size   : 20 bytes (alignment 4)


** Section #11 '.comment' (SHT_PROGBITS)
    Size   : 732 bytes


** Section #12 '.shstrtab' (SHT_STRTAB)
    Size   : 136 bytes


